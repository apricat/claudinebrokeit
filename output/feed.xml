<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://claudinebroke.it</link>
    <atom:link href="http://claudinebroke.it/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 7 Jun 2016 11:37:11 +0000</pubDate>
    <lastBuildDate>Tue, 7 Jun 2016 11:37:11 +0000</lastBuildDate>

    <item>
      <title>Amazon Web Services &amp; CloudFlare</title>
      <link>http://claudinebroke.it/blog/2016/site-web-aws-cloudflare.html</link>
      <pubDate>Wed, 1 Jun 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/site-web-aws-cloudflare.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;images/cloudflare-et-bucket.png&quot; alt=&quot;Bukkits&quot; title=&quot;Bukkits dans le cloud&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Aujourd&apos;hui, petit billet en français pour partager une méthode fort pratique et abordable pour mettre en ligne des sites statiques avec Amazon Web Services (AWS) et CloudFlare.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Petit lancé de fleurs vers le brilliant &lt;a href=&quot;https://fredericbournival.com/&quot;&gt;Frédéric Bournival&lt;/a&gt;, qui m&apos;a guidé étape par étape au travers de ce processus.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3&gt;Nom de domaine&lt;/h3&gt;&lt;p&gt;Prenons pour acquis que vous êtes déjà le fier propriétaire d&apos;un nom de domaine chez un &lt;em&gt;registrar&lt;/em&gt;. Si ce n&apos;est pas le cas, &lt;code&gt;ahbincoudon.cc&lt;/code&gt; est &lt;a href=&quot;https://ca.godaddy.com/domains/searchresults.aspx?checkAvail=1&amp;domainToCheck=ahbincoudon.cc&quot;&gt;disponible&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;AWS (_ah-double-vé-ess_)&lt;/h3&gt;&lt;p&gt;Ensuite, pour entamer le processus, il faut un compte &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;AWS offre ses services &lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;S3&lt;/a&gt; d&apos;espace infonuagique gratuitement* pendant 12 mois sous le nom &lt;em&gt;Free Tier&lt;/em&gt;. &lt;em&gt;Deal&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;*Quelques limites s&apos;imposent :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 5GB de _Standard Storage_
* 20,000 requêtes _Get_
* 2,000 requêtes _Put_
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;S3, c&apos;est leur service de stockage. On crée des &lt;em&gt;buckets&lt;/em&gt; pour stocker et récupérer des &lt;em&gt;objets&lt;/em&gt; dans le nuage.&lt;/p&gt;&lt;h3&gt;Buckets&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1. https://console.aws.amazon.com/console/home?region=us-east-1
2. Sélectionner *S3*
3. *Simple Storage Service*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Il nous faut donc créer deux &lt;em&gt;buckets&lt;/em&gt; &lt;em&gt;S3&lt;/em&gt; -- un pour notre domaine et l&apos;autre pour la redirection &lt;code&gt;www&lt;/code&gt; -- dans la region la plus proche &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;N. Virginia, pour moi, n&apos;est qu&apos;à une distance négligeable de 1,149km. Par contre, une erreur de parcours a eu pour conséquence que ce site est situé en Caroline du Nord.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;claudinebroke.it
www.claudinebroke.it
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ensuite, il faut sélectionner le premier &lt;em&gt;bucket&lt;/em&gt; (&lt;code&gt;claudinebroke.it&lt;/code&gt;) pour éditer ses &lt;em&gt;properties&lt;/em&gt;. Sélectionnez &lt;em&gt;Static website hosting&lt;/em&gt; et &lt;em&gt;Enable website hosting&lt;/em&gt;. Ensuite, il faut lui attribuer des permissions. Dans &lt;em&gt;Bucket Policy&lt;/em&gt; : &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Sid&amp;quot;: &amp;quot;PublicReadForGetBucketObjects&amp;quot;,
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
      &amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
      &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::claudinebroke.it/*&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pour le &lt;em&gt;bucket&lt;/em&gt; &lt;code&gt;www&lt;/code&gt;, sélectionnez &lt;em&gt;Redirect all requests to another host name&lt;/em&gt;. &lt;em&gt;Merci bonsoir.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Vous pouvez dès lors accéder à votre site! E.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://claudinebroke.it.s3-website-us-west-1.amazonaws.com/
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;SYNC avec AWSCLI&lt;/h3&gt;&lt;p&gt;Prochaine étape : &lt;em&gt;syncer&lt;/em&gt; son contenu avec AWS. Depuis Ubuntu, on peut installer le &lt;em&gt;package management system&lt;/em&gt; &lt;code&gt;python-pip&lt;/code&gt;, qui nous permet d&apos;installer &lt;code&gt;awscli&lt;/code&gt; : un outil de gestion en ligne de commande pour AWS &lt;a href=&quot;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html&quot;&gt;(documentation)&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get -y install python-pip
pip install awscli
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Dans mon cas, j&apos;ai intégré les commandes dans mon script de &lt;em&gt;automated provisioning&lt;/em&gt; de &lt;em&gt;Vagrant&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Ensuite, il vous faut créer un utilisateur et lui attribuer une &lt;em&gt;key-pair&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Depuis la console Web d&apos;AWS, cliquez sur IAM - &lt;a href=&quot;https://console.aws.amazon.com/iam/home?region=us-east-1#home&quot;&gt;Identity &amp;amp; Access Management&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Créez un utilisateur. E.g. &lt;code&gt;s3bucketsync&lt;/code&gt;, et laissez le système générer la valeur &lt;em&gt;key-pair&lt;/em&gt;. Sauvegardez le &lt;em&gt;access key&lt;/em&gt; et sélectionnez l&apos;utilisateur nouvellement créé. &lt;/p&gt;&lt;p&gt;Dans &lt;em&gt;permission&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;attach policy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Filtrez pour &lt;em&gt;s3&lt;/em&gt; et sélectionner :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AmazonS3FullAccess
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Maintenant, de retour dans notre environnement Linux, on peut configurer l&apos;outil &lt;code&gt;AWSCLI&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws configure
AWS Access Key ID [None]: YOURSECRETID
AWS Secret Access Key [None]: YOURSECRETKEY
Default region name [None]: us-east-1
Default output format [None]: json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ensuite, vous n&apos;avez qu&apos;à naviguer jusqu&apos;au dossier que vous désirez envoyer dans les nuages et rouler cette commande :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws s3 sync . s3://claudinebroke.it --region us-west-1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Mes &lt;em&gt;buckets&lt;/em&gt; ayant voyager un peu, le paramètre facultatif &lt;code&gt;--region&lt;/code&gt; est utilisé pour outrepasser l&apos;option &lt;code&gt;Default region name&lt;/code&gt; désignée auparavant avec l&apos;outil &lt;code&gt;AWSCLI&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3&gt;CloudFlare&lt;/h3&gt;&lt;p&gt;Maintenant, &lt;code&gt;http://claudinebroke.it.s3-website-us-west-1.amazonaws.com/&lt;/code&gt;, comme addresse Web, c&apos;est pas simple simple à partager à vive voix dans un pub bruyant quand tu veux que tes amis ailles voir ton dernier billet de blog. Bref, il nous faut un alias, colloquialement appelé du &lt;code&gt;CNAME Flattening&lt;/code&gt;, pour faire le pont entre notre addresse AWS et notre nom de domaine.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt;, c&apos;est aussi une fantastique couche de sécurité et de &lt;em&gt;cache&lt;/em&gt; pour votre site Web. Pis c&apos;est gratuit, oui oui.&lt;/p&gt;&lt;p&gt;Créez-vous un compte CloudFlare, puis sélectionnez &lt;code&gt;DNS&lt;/code&gt;. Vous aurez de besoin, au minimum, de deux entrées :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CNAME (i) *Flattening* | claudinebroke.it | is an alias of claudinebroke.it.s3-website-us-west-1.amazonaws.com | Automatic | *Petit nuage transpercé d&amp;#39;une flèche*
CNAME | www | is an alias of claudinebroke.it | Automatic | *Petit nuage transpercé d&amp;#39;une flèche*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CloudFlare vous attribue ensuite des &lt;em&gt;nameservers&lt;/em&gt;. E.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    sam.ns.cloudflare.com
    eve.ns.cloudflare.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;La dernière étape consiste à retourner chez le &lt;em&gt;registrar&lt;/em&gt; -- là où vous vous êtes procuré vos noms de domaines -- pour lier les &lt;em&gt;nameservers&lt;/em&gt; aux noms de domaines.&lt;/p&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Et c&apos;est tout! &lt;code&gt;claudinebroke.it&lt;/code&gt; affiche maintenant le contenu de &lt;code&gt;claudinebroke.it.s3-website-us-west-1.amazonaws.com&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Ça peut prendre quelques temps pour que les &lt;code&gt;DNS Records&lt;/code&gt; se rafraîchissent, par contre, donc profitez de cette petite pause et marquez l&apos;occasion avec une bonne bière!&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Favorite Pizza I</title>
      <link>http://claudinebroke.it/blog/2016/favorite-pizza-I.html</link>
      <pubDate>Mon, 9 May 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/favorite-pizza-I.html</guid>
      	<description>
	&lt;h2&gt;Blueberry, Ricotta, Feta and Honey-caramelized Onion Naan Pizza&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Time: 1 hour&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Makes: 4 individual pizzas&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I know what you&apos;re thinking: &quot;That recipe sounds weird&quot; -- and you&apos;re right, it is. Thing is, I just spent the weekend solo and decided that that would be the perfect occasion to experiment a little and make a weird-yet-amazingly-delicious sweet-salty-spicy pizza. In fact, this recipe was so good that I just had to make it again the last night for my boyfriend to taste.&lt;/p&gt;&lt;h3&gt;Dough&lt;/h3&gt;&lt;p&gt;If you&apos;ve never made dough, I highly suggest you try your hand at it; it&apos;s quite easy and rewarding! It requires very little effort and there&apos;s convenient &lt;em&gt;waiting&lt;/em&gt; times that you can use to prep the toppings, drink beer and eat chips :)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1 tbs dry yeast&lt;/li&gt;
  &lt;li&gt;1 tbs sugar&lt;/li&gt;
  &lt;li&gt;1 tsp salt&lt;/li&gt;
  &lt;li&gt;125ml lukewarm water&lt;/li&gt;
  &lt;li&gt;2 cups non-bleached flour&lt;/li&gt;
  &lt;li&gt;1 tbs olive oil&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Pizza Toppings&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1/2 cup ricotta cheese&lt;/li&gt;
  &lt;li&gt;1/2 cup feta cheese, finely crumbled&lt;/li&gt;
  &lt;li&gt;1 cup frozen blueberries&lt;/li&gt;
  &lt;li&gt;1 tsp honey&lt;/li&gt;
  &lt;li&gt;1 tsp red pepper flakes&lt;/li&gt;
  &lt;li&gt;1 red onion, thinly sliced&lt;/li&gt;
  &lt;li&gt;1 tsp olive oil&lt;/li&gt;
  &lt;li&gt;pinch of salt&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Preparation&lt;/h3&gt;&lt;p&gt;Get the water to about 37 degrees celsius. Conveniently, this is approximately the same temperature as your body&apos;s! So you can get a close-enough temperature straight from the tap by wetting your finger, dropping it under your tongue, adjusting the tap temperature and repeating the operation until the water feels neither too hot or too cold under the tongue. Once satisfying, pour 125ml into a large bowl. Stir in yeast and sugar and set aside for 15 minutes**.&lt;/p&gt;&lt;p&gt;Once the yeast has been activated, stir in oil, salt and flour. Mix using hands once it becomes too hard. The resulting ball of dough should be sticky, and you can add flour and/or water to the mix if the texture isn&apos;t satisfactory. Wait 15 minutes. Knead the dough 20 times and separate into 4 equal-sized balls. On a lightly floured surface, use a rolling pin to get the balls to approximately the surface size of your frying pan. Set aside.&lt;/p&gt;&lt;p&gt;Pre-heat oven to 400°F. &lt;/p&gt;&lt;p&gt;Slice onion. Heat oil on low-heat in non-stick frying pan and add onion, red pepper flakes. Cook until onions are translucent. Add honey and fry another few minutes until onions are caramelized and fragrant. Remove onions from pan, and add start frying, one by one, the pizza doughs. Flip when each side is golden and crispy.&lt;/p&gt;&lt;p&gt;Once the pizza doughs are ready, place them on baking sheets. Spread the ricotta over the doughs, and add feta, caramelized onions, and blueberries on top.&lt;/p&gt;&lt;p&gt;Bake for about 10 minutes or until the dough is crispy and the toppings are hot. Sprinkle some salt on top before serving.&lt;/p&gt;&lt;p&gt;** Note that if after 15 minutes the yeast mixture hasn&apos;t &quot;foamed&quot; then you should just throw out the mixture and try again; that happens when the water is too warm, too cold, or if the yeast is too old.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Beer: &lt;em&gt;Houblon Noir&lt;/em&gt;, a Black IPA from Brasseurs du Monde&lt;/em&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Petit Workout - The Application</title>
      <link>http://claudinebroke.it/blog/2016/petitworkout-III.html</link>
      <pubDate>Sun, 8 May 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/petitworkout-III.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;images/SpriteSheet.png&quot; alt=&quot;Working out&quot; title=&quot;:]&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Our petit workout application is finally taking shape! We can now start our workouts and see the elapsed time... which means that all we have currently is no better than a timer!&lt;/p&gt;&lt;p&gt;In this article, we&apos;ll enhance the application with a way to visualize the interval&apos;s intensity, the remaining time for the current interval, and we&apos;ll add a little sprite animation for some visual appeal.&lt;/p&gt;&lt;h3&gt;Main Class&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class WorkoutQueueTest extends Application {

    private Label timerLabel     = new Label(&amp;quot;00:00:00&amp;quot;);
    private Label countdownLabel = new Label(&amp;quot;00:00:00&amp;quot;);
    private Label intensityLabel = new Label(&amp;quot;Easy&amp;quot;);

    private Sprite spriteAnimation;

    public static void main(String[] args) throws Exception
    {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception
    {
        primaryStage.setTitle(&amp;quot;Petit Workout&amp;quot;);

        final ImageView imageView = new ImageView(
            new Image(&amp;quot;file:&amp;quot; + this.getClass().getResource(&amp;quot;/SpriteSheet.png&amp;quot;).getPath())
        );
        imageView.setViewport(new Rectangle2D(0, 68, 64, 64));

        spriteAnimation = new Sprite(imageView, 4, 4, 0, 68, 64, 64);
        spriteAnimation.setCycles(Duration.millis(1000));

        final Button startBtn = new Button(&amp;quot;Start&amp;quot;);
        startBtn.setOnAction((e) -&amp;gt; startWorkout());

        BorderPane pane = new BorderPane();

        pane.setTop(startBtn);
        pane.setBottom(timerLabel);
        pane.setRight(countdownLabel);

        StackPane centerPane = new StackPane();
        centerPane.getChildren().addAll(intensityLabel, imageView);

        pane.setCenter(centerPane);

        primaryStage.setScene(new Scene(pane, 300, 250));

        primaryStage.show();
    }

    public void startWorkout()
    {
        Queue queue = new Queue();

        spriteAnimation.play();

        (new EventsPerFrame(queue, timerLabel, countdownLabel, intensityLabel)).start();

        Producer producer = new Producer(queue);
        new Thread(producer).start();

        Consumer consumer = new Consumer(queue);
        new Thread(consumer).start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, a few things were added to the main classe&apos;s &lt;code&gt;start&lt;/code&gt; method. The &lt;code&gt;ImageView&lt;/code&gt; loads our sprite sheet image, and the &lt;code&gt;SpriteAnimation&lt;/code&gt; class handles animating it. We also added label elements, which are updated on every frame using the &lt;code&gt;EventsPerFrame&lt;/code&gt; method that extends the &lt;code&gt;javafx.animation.AnimationTimer&lt;/code&gt; class.&lt;/p&gt;&lt;h3&gt;Labels&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;private Label timerLabel     = new Label(&amp;quot;00:00:00&amp;quot;);
private Label countdownLabel = new Label(&amp;quot;00:00:00&amp;quot;);
private Label intensityLabel = new Label(&amp;quot;Easy&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main class is then only in charge of &lt;em&gt;placing&lt;/em&gt; the elements within the application window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;final Button startBtn = new Button(&amp;quot;Start&amp;quot;);
startBtn.setOnAction((e) -&amp;gt; startWorkout());

BorderPane pane = new BorderPane();

pane.setTop(startBtn);
pane.setBottom(timerLabel);
pane.setRight(countdownLabel);

StackPane centerPane = new StackPane();
centerPane.getChildren().addAll(intensityLabel, imageView);

pane.setCenter(centerPane);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the &lt;code&gt;intensityLabel&lt;/code&gt; shares a &lt;code&gt;BorderPane&lt;/code&gt; pane with the &lt;code&gt;imageView&lt;/code&gt; object. Using the &lt;code&gt;StackPane&lt;/code&gt; layout, or any other layouts, we can easily add multiple elements unto a single pane.&lt;/p&gt;&lt;p&gt;In the previous blog post, we used the &lt;code&gt;AnimationTimer&lt;/code&gt; method to fire events on each frame. To better handle the extra logic behind our extra labels, the &lt;code&gt;EventsPerFrame&lt;/code&gt; method was created to extend on the &lt;code&gt;AnimationTimer&lt;/code&gt; and handle the labels&apos; state on every frame change.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(new EventsPerFrame(queue, timerLabel, countdownLabel, intensityLabel)).start();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&apos;s look at the class in detail:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class EventsPerFrame extends javafx.animation.AnimationTimer
{
    long startTime = System.nanoTime();
    int stopwatch  = 0;
    Interval intervalInProgress;

    private Queue queue;
    private Label timerLabel;
    private Label countdownLabel;
    private Label intensityLabel;

    public EventsPerFrame(
        Queue queue,
        Label timerLabel,
        Label countdownLabel,
        Label intensityLabel
    ) {
        this.queue          = queue;
        this.timerLabel     = timerLabel;
        this.countdownLabel = countdownLabel;
        this.intensityLabel = intensityLabel;
    }

    @Override
    public void handle(long now)
    {
        Interval interval;
        try {
            interval = queue.element();
        } catch (java.lang.NullPointerException e) {
            return;
        }

        if (interval == null) {
            return;
        }

        int elapsedTime = toIntExact((now - startTime) / 1000000000);

        timerLabel.setText(ReadableTimeConverter.convert(elapsedTime));
        countdownLabel.setText(ReadableTimeConverter.convert(stopwatch - elapsedTime));
        intensityLabel.setText(interval.getIntensity());

        if (intervalStillInProgress(interval)) {
            return;
        }

        intervalInProgress = interval;
        stopwatch          = toIntExact(elapsedTime + interval.getDuration());
    }

    private boolean intervalStillInProgress(Interval interval) {
        return intervalInProgress == interval;
    }
}

public class ReadableTimeConverter {

    /**
     * @param seconds
     * @return String
     */
    public static String convert(int seconds)
    {
        int hr = seconds / 3600;
        int rem = seconds % 3600;
        int mn = rem / 60;
        int sec = rem % 60;

        return (hr &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + hr + &amp;quot;:&amp;quot; + (mn &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + mn + &amp;quot;:&amp;quot; + (sec &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + sec;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It may look complicated, but its quite simple; we always increment the &lt;code&gt;elapsedTime&lt;/code&gt;, always decrement the &lt;code&gt;stowatch&lt;/code&gt;, and always update the &lt;code&gt;intensityLabel&lt;/code&gt; with the value we get from the current &lt;code&gt;Interval&lt;/code&gt; object being processed. The only complicated bit is that we need to &quot;refill&quot; the stopwatch with the interval&apos;s duration whenever we detect that the queue has picked up a new interval.&lt;/p&gt;&lt;h3&gt;ImageView&lt;/h3&gt;&lt;p&gt;Now back on the main class, we added an &lt;code&gt;ImageView&lt;/code&gt;, which is sent to a &lt;code&gt;Sprite&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;From the Java documentation:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&quot;The ImageView is a Node used for painting images loaded with Image class.&quot;&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;In other words, the Image view, using the &lt;code&gt;setViewport&lt;/code&gt; method, permits the &quot;clipping&quot; of an image, i.e. removing and adding pixels to an image&apos;s &quot;visible area&quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;final ImageView imageView = new ImageView(
    new Image(&amp;quot;file:&amp;quot; + this.getClass().getResource(&amp;quot;/SpriteSheet.png&amp;quot;).getPath())
);
imageView.setViewport(new Rectangle2D(0, 68, 64, 64));
spriteAnimation = new Sprite(imageView, 4, 4, 0, 68, 64, 64);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Note that since the image is a local resource file, we append &lt;code&gt;file:&lt;/code&gt; to the path.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The &lt;code&gt;Sprite&lt;/code&gt; class is where the animation happens. Simply put, our viewport has a set width and height, that &quot;frames&quot; our &lt;code&gt;SpriteSheet&lt;/code&gt;. On every new frame animation we &lt;code&gt;move&lt;/code&gt; the &lt;code&gt;SpriteSheet&lt;/code&gt; horizontally and this, until we reach the end of the &lt;code&gt;SpriteSheet&lt;/code&gt; where we start again. This is the same concept used with traditional film, so the logic is quite simple to grasp.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Sprite extends Transition {

    private final ImageView imageView;
    private final int frameCount;
    private final int columns;
    private final int offsetX;
    private final int offsetY;
    private final int width;
    private final int height;

    private int lastIndex;

    public Sprite(
        ImageView imageView,
        int frameCount,
        int columns,
        int offsetX,
        int offsetY,
        int width,
        int height
    ) {
        this.imageView  = imageView;
        this.frameCount = frameCount;
        this.columns    = columns;
        this.offsetX    = offsetX;
        this.offsetY    = offsetY;
        this.width      = width;
        this.height     = height;
    }

    public void setCycles(Duration duration)
    {
        setCycleDuration(duration);
        setInterpolator(Interpolator.LINEAR);
        setCycleCount(INDEFINITE);
    }

    protected void interpolate(double k) {
        final int index = Math.min((int) Math.floor(k * frameCount), frameCount - 1);
        if (index != lastIndex) {
            final int x = (index % columns) * width  + offsetX;
            final int y = (index / columns) * height + offsetY;
            imageView.setViewport(new Rectangle2D(x, y, width, height));
            lastIndex = index;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that&apos;s it! So now, we can &lt;em&gt;start&lt;/em&gt; our workout series, display the &lt;em&gt;intensity&lt;/em&gt; for the current interval, as well as its &lt;em&gt;remaining time&lt;/em&gt;, and, lastly, display a little sprite animation to go along with the application. In the next article, we will cover how to implement multiple workouts as &lt;code&gt;json&lt;/code&gt; structured application resources.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;As always, the code related to this blog post is available on my &lt;a href=&quot;https://github.com/apricat/petitworkout&quot;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
	</description>
    </item>
    <item>
      <title>Favorite Grilled Cheese III</title>
      <link>http://claudinebroke.it/blog/2016/favorite-grilled-cheese-III.html</link>
      <pubDate>Sun, 1 May 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/favorite-grilled-cheese-III.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;images/avocado.jpg&quot; alt=&quot;Health Potato&quot; title=&quot;Drawing avocadoes is hard :\&quot;&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Guacamole Grilled Cheese&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Time: 30 minutes&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Makes: 4 sandwiches&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Every once in a while, you ask your partner what he/she would like for dinner and they blurt out something so weird that you just have to make it. This is what happened to me yesterday when I inquired about what we should eat and got &lt;em&gt;avocado grilled cheese&lt;/em&gt; as an answer. Turns out its quite popular -- as proven by a quick internet search -- and definitely very tasty, making this one of my favorite grilled cheese recipe of all time. &lt;/p&gt;&lt;h3&gt;Guacamole&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1 avocado&lt;/li&gt;
  &lt;li&gt;1/2 roma tomato, chopped&lt;/li&gt;
  &lt;li&gt;2 tbs red onion, chopped&lt;/li&gt;
  &lt;li&gt;1 handful fresh cilantro, chopped&lt;/li&gt;
  &lt;li&gt;juice from 1 lime&lt;/li&gt;
  &lt;li&gt;salt and pepper&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Grilled Cheese&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;8 slices of cheddar cheese&lt;/li&gt;
  &lt;li&gt;8 slices of whole wheat bread -- &lt;em&gt;I used a small loaf of Harvest Bread, which is a mix of roasted pumpkin seeds, flax seeds, sunflower seeds, millet and poppy seeds&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;butter, spread on one side of each bread slices&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Preparation&lt;/h3&gt;&lt;p&gt;Prepare guacamole first, as it takes the longest to prepare. Heat up non-stick frying pan on medium. Add 1/2 of slices of bread, butter side down. Add two slices of cheese and 1/4 of guacamole mixture on top of each slice of bread. Top with slice of bread, butter side up. Flip once the bottom slice is golden brown, and serve once both sides are roasted.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Beer: &lt;em&gt;Oktoberfest&lt;/em&gt;, a copper lager from Les Trois Mousquetaires&lt;/em&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Petit Workout - The Application</title>
      <link>http://claudinebroke.it/blog/2016/graphics.html</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/graphics.html</guid>
      	<description>
	&lt;p&gt;Hello again! Today we&apos;re going to continue working on the little workout application we instigated in my previous blog post. This post will cover the basic concepts behind generating a &lt;em&gt;Graphical User Interface&lt;/em&gt; for a Java application :coffee:&lt;/p&gt;&lt;h3&gt;JavaFX || Swing || AWT&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Swing&lt;/code&gt;, &lt;code&gt;JavaFX&lt;/code&gt; and &lt;code&gt;AWT&lt;/code&gt; are GUI widget toolkits that offer components to allow the interaction between users and applications. Right away we can eliminate &lt;code&gt;AWT&lt;/code&gt; from our potential application toolkit as it directly uses the operating system&apos;s components; meaning that the resulting application will not have the same &lt;em&gt;look and feel&lt;/em&gt; on Ubuntu, Mac and Windows. This leaves us with &lt;code&gt;Swing&lt;/code&gt; and &lt;code&gt;JavaFX&lt;/code&gt; as candidates. Both are valid for our needs, however, Oracle corp. has determined that &lt;code&gt;JavaFX&lt;/code&gt; is set to be replacing &lt;code&gt;Swing&lt;/code&gt; as &lt;em&gt;the&lt;/em&gt; GUI toolkit. This means that it isn&apos;t deprecated as of yet, but is receiving far less attention in the latest Java releases.&lt;/p&gt;&lt;h3&gt;JavaFX Basics&lt;/h3&gt;&lt;p&gt;Here is a simple visual representation of how a basic JavaFX application is structured:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _____________________
| stage             x |
|  _________________  |
| | scene           | |
| |  _____________  | |
| | | layout pane | | |
| | |  _________  | | |
| | | | button  | | | |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we need to add components (buttons, labels, graphics, etc.) to a layout, that is set within a scene, that is held within a stage.&lt;/p&gt;&lt;p&gt;In code, it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class WorkoutQueueTest extends Application {

    private Label timerLabel;

    public static void main(String[] args) throws Exception
    {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception
    {
        primaryStage.setTitle(&amp;quot;Petit Workout&amp;quot;);

        Button startBtn  = new Button(&amp;quot;Start&amp;quot;);
        startBtn.setOnAction((e) -&amp;gt; startWorkout());

        timerLabel = new Label(&amp;quot;00:00:00&amp;quot;);

        BorderPane pane  = new BorderPane();
        pane.setTop(startBtn);
        pane.setBottom(timerLabel);

        primaryStage.setScene(new Scene(pane, 300, 250));
        primaryStage.show();
    }

    public void startWorkout()
    {
        AnimationTimer animationTimer = new AnimationTimer() {
            long startTime = System.nanoTime();

            @Override
            public void handle(long now) {
                timerLabel.setText(
                    ReadableTimeConverter.convert(
                        toIntExact(
                            (now - startTime) / 1000000000
                        )
                    )
                );
            }
        };

        animationTimer.start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Labels and Buttons&lt;/h3&gt;&lt;p&gt;Components classes offer more than one constructor, meaning that the argument count will determine what funtion is called. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Label timerLabel = new Label();
timerLabel.setText(&amp;quot;00:00:00&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Is the same as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Label timerLabel = new Label(&amp;quot;00:00:00&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is because Java supports classes with multiple constructors, which means that the constructor being called is determined by its signature. This is called &lt;em&gt;overloading constructers&lt;/em&gt;. If we dig a bit deeper, we can see that the &lt;code&gt;Label&lt;/code&gt; class offers three different constructors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Creates an empty label
 */
public Label() {
    initialize();
}

/**
 * Creates Label with supplied text.
 * @param text null text is treated as the empty string
 */
public Label(String text) {
    super(text);
    initialize();
}

/**
 * Creates a Label with the supplied text and graphic.
 * @param text null text is treated as the empty string
 * @param graphic a null graphic is acceptable
 */
public Label(String text, Node graphic) {
    super(text, graphic);
    initialize();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means that an often used actions such as adding text and graphics to a newly created &lt;code&gt;Label&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt; objects are accessible through a one-liner method call.&lt;/p&gt;&lt;h4&gt;Buttons and Lambda Event Handling&lt;/h4&gt;&lt;p&gt;Specific to buttons is the possibility to generate event listeners whose methods execute logic based on events and targets. In our case, we want to call upon the &lt;code&gt;startWorkout&lt;/code&gt; method upon button click.&lt;/p&gt;&lt;p&gt;From the Java doc:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;When a button is pressed and released a ActionEvent is sent. Your application can perform some action based on this event by implementing an EventHandler to process the ActionEvent.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;And:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Lambda Expressions enable you to encapsulate a single unit of behavior and pass it to other code. You can use a lambda expressions if you want a certain action performed on each element of a collection, when a process is completed, or when a process encounters an error.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Starting Java 8, you can use anonynous (lambda) functions in your code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;startBtn.setOnAction((e) -&amp;gt; startWorkout());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a much more direct, easy-to-read and elegant way to execute the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;startBtn.setOnAction(new EventHandler&amp;lt;ActionEvent&amp;gt;() {
    @Override
    public void handle(ActionEvent event) {
       startWorkout();
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So there&apos;s really no excuse in our case to not opt for the Lambda expression; the resulting smaller code footprint and &lt;em&gt;straight-to-the-point&lt;/em&gt; syntax really improve legibility.&lt;/p&gt;&lt;h3&gt;Layout Panes&lt;/h3&gt;&lt;p&gt;Once we&apos;ve created our buttons and labels, we need to place these on the application window. This is where the JavaFX SDK&apos;s layout container classes, such as &lt;code&gt;BorderPane&lt;/code&gt;, &lt;code&gt;StackPane&lt;/code&gt;, &lt;code&gt;GridPane&lt;/code&gt; and &lt;code&gt;FlowPane&lt;/code&gt;, come to our aid. You can manually lay out UI components by setting their position and size within your JavaFX application. However, using layouts makes it easier - and quicker - to manage the classic cases where you need such common layouts as rows, columns and tiles. It even covers repositioning elements upon window resize operations. Since &lt;em&gt;Petit Workout&lt;/em&gt;, in its current iteration, is quite &lt;em&gt;humble&lt;/em&gt;, we can use the basic &lt;code&gt;BorderPane&lt;/code&gt; layout container, which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______________________
| top                   |
|_______________________|
| left | center | right |
|______|________|_______|
| bottom                |
|_______________________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Placing our elements is then as easy as using the &lt;code&gt;set&lt;/code&gt; methods available with the &lt;code&gt;BorderPane&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BorderPane pane = new BorderPane();
pane.setTop(startBtn);
pane.setBottom(timerLabel);
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Scene and Stage -- Or putting it all together&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;primaryStage.setScene(new Scene(pane, 300, 250));
primaryStage.show();
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Timer&lt;/h3&gt;&lt;p&gt;Since we want to be as conservative as possible with thread usage in order to save resources, we can latch on to pre-existing runnable implementations to run a timer that monitors our workout. We can thus instantiate a new &lt;code&gt;AnimationTimer&lt;/code&gt; that is associated to the JavaFX &lt;code&gt;MasterTimer&lt;/code&gt; instance. In effect, this means that our &lt;code&gt;AnimationTimer&lt;/code&gt; events will fire upon ever frame within our JavaFX application, much like the Swing &lt;code&gt;redraw&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;long timestampOnInit = System.nanoTime();
AnimationTimer animationTimer = new AnimationTimer() {
    @Override
    public void handle(long now) {
        timerLabel.setText(
            ReadableTimeConverter.convert(
                toIntExact((now - timestampOnInit) / 1000000000)
            )
        );
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In effect, upon each frame execution, compare the current timestamp with the one we captured upon &lt;em&gt;start&lt;/em&gt; button press. The resultant timestamp is afterward used to update our application&apos;s timer label with the elapsed time value converter as a &lt;code&gt;ReadableTimeConverter&lt;/code&gt; value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ReadableTimeConverter {

    /**
     * @param seconds
     * @return String
     */
    public static String convert(int seconds)
    {
        int hr  = seconds / 3600;
        int rem = seconds % 3600;
        int mn  = rem / 60;
        int sec = rem % 60;

        return (hr &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + hr + &amp;quot;:&amp;quot; + (mn &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + mn + &amp;quot;:&amp;quot; + (sec &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + sec;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The advantage with this solution is that we are never dependent upon the CPU cycle&apos;s &lt;em&gt;idea&lt;/em&gt; of a timestamp. If we were to instantiate a &lt;code&gt;runnable&lt;/code&gt; instance set to execute, for example, every second, after some time we would start to see pretty severe discrepencies between our application&apos;s time and real time. This is because scheduled &lt;code&gt;runnable&lt;/code&gt; tasks are dependent upon the CPU cycle&apos;s time. This can manifest in slower or faster times. So you could be, without knowing it, working out for a mear 40 minutes instead of a full 45; which is &lt;em&gt;unacceptable&lt;/em&gt; ;)&lt;/p&gt;&lt;h3&gt;Closing Statement&lt;/h3&gt;&lt;p&gt;So this brings us a little closer to a fully working workout application. In the next blog post we&apos;ll integrate our &lt;code&gt;producer-consumer&lt;/code&gt; thread pattern and add a countdown and intensity label to the GUI :excited:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;As always, the code related to this blog post is available on my &lt;a href=&quot;https://github.com/apricat/petitworkout&quot;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
	</description>
    </item>
    <item>
      <title>Favorite Soup II</title>
      <link>http://claudinebroke.it/blog/2016/favorite-soup-II.html</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/favorite-soup-II.html</guid>
      	<description>
	&lt;h2&gt;Leek, Turnip and Rice Soup&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Time: 45 minutes&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I&apos;ve been battling a bit of a cold lately, and nothing makes me happier than warm, fagrant soup when I feel like this.&lt;/p&gt;&lt;p&gt;If you&apos;re a normal human being, then you used to hate turnip as a kid. When I saw the original recipe, I focused solely on the leeks and rice, and my brain completely made abstraction of the root vegetable required. This until I hit the grocery store aisle and ended up with the unsightly blob in my hand, and that is where I decided to give it a try. I &lt;em&gt;did&lt;/em&gt; change my mind about brussel sprouts this year, so I decided to give turnips a try as an adult. I&apos;m so glad I did! I owe my mom an apology, &lt;em&gt;turnips aren&apos;t so bad&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Adapted from the &lt;a href=&quot;http://cooking.nytimes.com/recipes/12179-leek-turnip-and-rice-soup&quot;&gt;New York Times&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;Ingredients&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1 tablespoon extra virgin olive oil&lt;/li&gt;
  &lt;li&gt;3 large leeks, white and green parts, cleaned and sliced&lt;/li&gt;
  &lt;li&gt;1 small turnip, sliced in 1/2 inch cubes&lt;/li&gt;
  &lt;li&gt;2 garlic cloves, minced&lt;/li&gt;
  &lt;li&gt;6 cups water&lt;/li&gt;
  &lt;li&gt;1 vegetable bouillon cube&lt;/li&gt;
  &lt;li&gt;salt and pepper&lt;/li&gt;
  &lt;li&gt;1 bay leaf&lt;/li&gt;
  &lt;li&gt;1/2 cups of long brown rice&lt;/li&gt;
  &lt;li&gt;2 handfuls of fresh italian parsley, chopped&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Preparation&lt;/h3&gt;&lt;p&gt;On medium, heat the oil in a large soup pot and add leek slices. Cook until the leeks begin to soften and add turnip. Stir often and cook for about 5 more minutes, or until leeks are fragrant and turnips are translucent. Add salt, pepper and garlic, cook for another minute. Add water, stock, bay leaf and rice. Set kitchen timer to 30 minutes, reduce heat to low, and go watch some netflix. Add fresh parsley to soup before serving.&lt;/p&gt;&lt;h3&gt;Notes&lt;/h3&gt;&lt;p&gt;I usually start by slicing the leek. Then, while the leek is softening in the pot, I cube the turnip. On the side, I also boil the required 6 cups of water in my electric kettle to speed up the soup making process.&lt;/p&gt;&lt;p&gt;Also, Leek and Turnip are best bought, in Quebec, in winter: &lt;a href=&quot;https://www.mapaq.gouv.qc.ca/fr/Publications/FruitsetLegumesduquebec.pdf&quot;&gt;calendar&lt;/a&gt; (fr)&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Petit Workout Queue</title>
      <link>http://claudinebroke.it/blog/2016/petitworkout.html</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2016/petitworkout.html</guid>
      	<description>
	&lt;p&gt;Snow is clearing out, maple syrup is flowing, and the birds are coming back; spring is finally here! This means I&apos;ll soon be back on my bike exploring all the amazing land accessible on two wheels - yay! I can&apos;t even count how many how many boring hours I&apos;ve spent on my stationary bike this winter trying to maintain my stamina, cardio and muscle. Now&apos;s the time to kick it up a notch, though, and maximize all these remaining living room workouts in order to be in the best shape possible when I hit the streets.&lt;/p&gt;&lt;p&gt;A great way to maximize workouts is to do interval training, i.e. executing series of exercises at difference intensity levels. I tried doing so using my phone&apos;s stopwatch, but sweat and phone don&apos;t match too well. Besides, how else was I going to learn Java? So I started building my own little workout application.&lt;/p&gt;&lt;h3&gt;Petit Workout&lt;/h3&gt;&lt;p&gt;The way our workouts (yes, now it is -our- workout) are to be structured is quite easy; each &lt;em&gt;workout&lt;/em&gt; contains a series of &lt;em&gt;intervals&lt;/em&gt; at specific &lt;em&gt;intensity&lt;/em&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Workout example #1

+----+-----------+-----------+
|    |  Duration | Intensity |
+----+-----------+-----------+
|  0 |      6000 | &amp;quot;easy&amp;quot;    |
|  1 |      1000 | &amp;quot;hard&amp;quot;    |
|  2 |      3000 | &amp;quot;easy&amp;quot;    |
+----+-----------+-----------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we are to focus on the individual intervals, we get objects like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Interval {

    private String intensity;
    private long duration;

    public Interval(String intensity, long duration) 
    {
        this.intensity = intensity;
        this.duration  = duration;
    }

    @Override
    public String toString() 
    {
        return &amp;quot;Interval{&amp;quot; +
            &amp;quot;intensity=&amp;#39;&amp;quot; + intensity + &amp;#39;\&amp;#39;&amp;#39; +
            &amp;quot;, duration=&amp;quot; + duration +
            &amp;#39;}&amp;#39;;
    }

    public String getIntensity() 
    {
        return intensity;
    }

    public long getDuration() 
    {
        return duration;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, our &lt;code&gt;Interval&lt;/code&gt; object is a quite basic data struture with getters to retrieve the &lt;code&gt;intensity&lt;/code&gt; and &lt;code&gt;duration&lt;/code&gt; of our &lt;code&gt;Interval&lt;/code&gt; when needed. For our current iteration of the project, we&apos;re also implementing an &lt;code&gt;@Override&lt;/code&gt; of the &lt;code&gt;Object&lt;/code&gt; &lt;code&gt;toString()&lt;/code&gt; method to cleanly format output during tests. Note that in Java, every class has the &lt;code&gt;Object&lt;/code&gt; class as a superclass, all objects implement the methods of this class, including &lt;code&gt;toString()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now back to our &lt;em&gt;series&lt;/em&gt;; one concept to extract from the table provided above is that we are effectively wanting to build a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;intervals&lt;/code&gt;. From the Java Api documentation: &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A collection represents a group of objects, known as its elements.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That&apos;s pretty abstract, but also on point; a &lt;code&gt;Collection&lt;/code&gt; is a &lt;code&gt;group&lt;/code&gt; of &lt;code&gt;objects&lt;/code&gt;. Defining an abstract concept allows us to narrow down on specific implementations that may better meet our application needs. In this case, &lt;code&gt;Queues&lt;/code&gt;, which implement the &lt;code&gt;Collection&lt;/code&gt; interface, seeem to fit the bill as they order elements in a FIFO (first-in-first-out) manner -- &lt;em&gt;note that there are some exceptions to this ordering, like &lt;code&gt;Priority queues&lt;/code&gt;, which we won&apos;t discuss as this is outside our project&apos;s scope&lt;/em&gt;. &lt;/p&gt;&lt;p&gt;In this little workout sequencing application, once an interval has terminated its execution, i.e. when its fulfilled its duration time, the application needs to initiate the next interval available in the queue.&lt;/p&gt;&lt;h3&gt;Queue&lt;/h3&gt;&lt;p&gt;There are many types of queuing patterns available through the Java API &lt;code&gt;Collection&lt;/code&gt; interface. One of these concrete implementations is the &lt;code&gt;LinkedList&lt;/code&gt;, which can be used to store and retrieve elements in a list&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that Arrays, in Java, are reserved for primative types like integers, doubles, booleans, etc. and not objects, which include strings.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Here is an example of how we can use a &lt;code&gt;LikedList&lt;/code&gt; as a &lt;code&gt;Queue&lt;/code&gt; to generate our workout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.util.LinkedList;

public class Queue {
    private LinkedList&amp;lt;Interval&amp;gt; intervalQueue = new LinkedList&amp;lt;&amp;gt;();

    public synchronized void put(Interval interval)
    {
        System.out.println(&amp;quot;Queuing: &amp;quot; + interval);

        intervalQueue.addLast(interval);
        notifyAll();
    }

    public synchronized Interval take()
    {
        while (intervalQueue.size() == 0)
        {
            try
            {
                wait();
            }
            catch (InterruptedException e) {}
        }
        return intervalQueue.removeFirst();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Three important concepts to extract from this class are that:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;p&gt;Interacting with a &lt;code&gt;LinkedList&lt;/code&gt; implementation that contains &lt;code&gt;Interval&lt;/code&gt; objects (&lt;code&gt;LinkedList&amp;lt;Interval&amp;gt;&lt;/code&gt;) effectively guarantees that we can call the &lt;code&gt;getDuration&lt;/code&gt; and &lt;code&gt;getIntensity&lt;/code&gt; methods on the queue&apos;s &lt;code&gt;take&lt;/code&gt; return object.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;As we are going to implement multiple threads in our application, we need to assure no &lt;code&gt;concurrency issues&lt;/code&gt; arise. Since the &lt;code&gt;LinkedList&lt;/code&gt; implementation supplied by the Java Api is not &lt;code&gt;synchronized&lt;/code&gt;, we may face conflicts if more than one thread attempts to access the list at the same time. The &lt;code&gt;synchronized&lt;/code&gt; keyword tells the Java Virtual Machine to &lt;em&gt;lock&lt;/em&gt; an object while it is being accessed by a thread, and to persist this &lt;em&gt;lock&lt;/em&gt; until the first thread is finished with the object.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;A thread attempting to extract a value from the queue while the latter is empty will &lt;code&gt;wait&lt;/code&gt; until an item is added. Also, when the thread attempting to remove an item from the buffer, it notifies other threads to let them know a new element is available for processing.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now to interact with our queue! We need methods that &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt; items to-and-from the list. There&apos;s actually a well know pattern for that: the &lt;code&gt;Producer-Consumer&lt;/code&gt; pattern. &lt;/p&gt;&lt;p&gt;From Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The [Producer-Consumer] problem describes two processes [...] who share a common, fixed-size buffer used as a queue. The producer&apos;s job is to generate a piece of data, put it into the buffer and start again. At the same time, the consumer is consuming the data (i.e., removing it from the buffer) one piece at a time. The problem is to make sure that the producer won&apos;t try to add data into the buffer if it&apos;s full and that the consumer won&apos;t try to remove data from an empty buffer.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;In other words, a &lt;em&gt;Producer&lt;/em&gt; is a &lt;code&gt;thread&lt;/code&gt; that produces new objects intended to be inserted into a queue, and a &lt;em&gt;Consumer&lt;/em&gt; is the &lt;code&gt;thread&lt;/code&gt; that processes the queued objects.&lt;/p&gt;&lt;h3&gt;Producer&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class Producer implements Runnable {

    protected Queue queue;

    public Producer(Queue queue) {
        this.queue = queue;
    }

    public void run() {
        queue.put(new Interval(&amp;quot;easy&amp;quot;, 6000));
        queue.put(new Interval(&amp;quot;hard&amp;quot;, 1000));
        queue.put(new Interval(&amp;quot;easy&amp;quot;, 3000));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Consumer&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class Consumer implements Runnable {

    protected Queue queue;

    public Consumer(Queue queue) {
        this.queue = queue;
    }

    public void run() {
        while (true) { consume(queue.take()); }
    }

    void consume(Interval x) {
        System.out.println(&amp;quot;Pulling: &amp;quot; + x);
        try {
            Thread.sleep(x.getDuration());
        }
        catch (InterruptedException e) {}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;** note the dependency injection of the &lt;code&gt;queue&lt;/code&gt; thread upon the &lt;code&gt;Producer&lt;/code&gt; and &lt;code&gt;Consumer&lt;/code&gt; objects. This is how the two classes communicate with each other.&lt;/p&gt;&lt;h3&gt;Testing&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class QueueTest {

    public static void main(String[] args) throws Exception {

        Queue queue = new Queue();

        Producer producer = new Producer(queue);
        Consumer consumer = new Consumer(queue);

        new Thread(producer).start();
        new Thread(consumer).start();

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, this is a pretty rudamentary implementation. The &lt;code&gt;Producer&lt;/code&gt; class places elements unto the queue, which the &lt;code&gt;Consumer&lt;/code&gt; &quot;takes&quot; out of the queue. The &lt;code&gt;Consumer&lt;/code&gt; does not take subsequent &lt;code&gt;Interval&lt;/code&gt; objects until it has terminated a &lt;code&gt;sleep()&lt;/code&gt; method with a duration &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Queuing: Interval{intensity=&amp;#39;easy&amp;#39;, duration=6000}
Queuing: Interval{intensity=&amp;#39;hard&amp;#39;, duration=1000}
Queuing: Interval{intensity=&amp;#39;easy&amp;#39;, duration=3000}
Pulling: Interval{intensity=&amp;#39;easy&amp;#39;, duration=6000}
Pulling: Interval{intensity=&amp;#39;hard&amp;#39;, duration=1000}
Pulling: Interval{intensity=&amp;#39;easy&amp;#39;, duration=3000}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that&apos;s that! Next up we will try to add a fun GUI :)&lt;/p&gt;
	</description>
    </item>

  </channel> 
</rss>
